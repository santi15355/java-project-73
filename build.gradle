plugins {
	id 'application'
	id 'checkstyle'
	id 'jacoco'
	id 'org.springframework.boot' version '2.5.6'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'com.adarshr.test-logger' version '2.1.1'
	id 'com.github.ben-manes.versions' version '0.38.0'
	id 'org.liquibase.gradle' version '2.0.4'
	id 'org.springdoc.openapi-gradle-plugin' version '1.3.3'
	id 'com.github.johnrengelman.processes' version '0.5.0'
	id 'org.siouan.frontend-jdk11' version '6.0.0'
}

checkstyle {
	toolVersion '9.2.1'
}

compileJava {
	options.release = 17
	options.encoding = 'UTF-8'
}

group = 'hexlet.code'
version = '1.0-SNAPSHOT'
sourceCompatibility = '17'

repositories {
	mavenCentral()
}

application {
	mainClass = 'hexlet.code.AppApplication'
}

wrapper {
	gradleVersion = '7.4'
	distributionType = Wrapper.DistributionType.ALL
}

dependencies {
	compileOnly 'org.projectlombok:lombok:1.18.22'

	annotationProcessor(
			'org.projectlombok:lombok:1.18.22',
			'com.querydsl:querydsl-apt:5.0.0:jpa',
			'javax.annotation:javax.annotation-api:1.3.2',
			'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final'
	)
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	implementation(
			'org.springframework.boot:spring-boot-starter-data-jpa',

			'org.springframework.boot:spring-boot-starter-web',
			'org.springframework.boot:spring-boot-starter-actuator',
			'org.springframework.boot:spring-boot-starter-validation',
			'org.springframework.boot:spring-boot-starter-security',
			'org.springframework.security:spring-security-jwt:1.0.4.RELEASE',
			'javax.xml.bind:jaxb-api:2.3.1',
			//'org.springframework:spring-core:4.3.30.RELEASE',
			'io.jsonwebtoken:jjwt:0.9.1',
			// Зависимость для swagger
			// Позволяет сгенерировать и проматривать интерактивную документацию по API
			'org.springdoc:springdoc-openapi-ui:1.5.12',
			'org.liquibase:liquibase-core:4.6.1',
			'com.querydsl:querydsl-core:5.0.0',
			'com.querydsl:querydsl-jpa:5.0.0',
			'com.rollbar:rollbar-spring-boot-webmvc:1.8.1'
	)

	liquibaseRuntime(
			sourceSets.main.output,
			'org.liquibase:liquibase-core:3.8.1',
			'org.liquibase.ext:liquibase-hibernate5:3.6',
			'org.springframework.boot:spring-boot-starter-data-jpa'
	)

	runtimeOnly (
			'com.h2database:h2:1.4.200',
			'org.postgresql:postgresql:42.2.24'
	)

	testImplementation(
			'org.springframework.boot:spring-boot-starter-security',
			'org.springframework.security:spring-security-test:5.5.1',
			'org.springframework.boot:spring-boot-starter-test',
			'com.tobedevoured.modelcitizen:spring:0.8.3'
	)
}

diffChangeLog {
	dependsOn compileJava
}

liquibase {
	activities {
		main {
			// Указываем путь, по которому будет сгенерирован файл миграции
			changeLogFile 'src/main/resources/db/changelog/changelog-master.xml'
			// Указывем источник, с которым будут сравниваться изменения
			// Это база данных, изначально она пустая
			url 'jdbc:h2:./taskManager'
			// Имя пользователя и пароль для подключения к базе
			username 'sa'
			password ''
			// Сравниваем с моделями, задавая пакет
			referenceUrl 'hibernate:spring:io.hexlet.javaspringblog.model.' +
					// Указываем диалект
					'?dialect=org.hibernate.dialect.H2Dialect' +
					// Указываем правила именования таблиц и столбцов,
					// чтобы они соответствовали правилам Spring
					'&hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy'
		}
	}
}


test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		html.outputLocation = layout.buildDirectory.dir('jacoco')
	}
}

jacoco {
	toolVersion = "0.8.7"
}

frontend {
	nodeVersion = '16.13.1'
	installScript = 'install'
	assembleScript = 'run build'
	packageJsonDirectory = file("${projectDir}/frontend")
}

def configFrontendTasks = {
	inputs.files(fileTree("$projectDir/frontend").exclude('build', 'node_modules'))
	outputs.dir("$buildDir/resources/main/static")
}

assembleFrontend {
	configure configFrontendTasks

	doLast {
		copy {
			from "$projectDir/frontend/build"
			into "$buildDir/resources/main/static"
		}
	}
}

installFrontend {
	configure configFrontendTasks
}

processResources.dependsOn assembleFrontend

task stage(dependsOn: ['clean', 'installDist'])
installDist.mustRunAfter clean
